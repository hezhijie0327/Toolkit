#!/bin/bash

# Current Version: 1.0.4

## How to get and use?
# git clone "https://github.com/hezhijie0327/Toolkit.git"
# bash ./Toolkit/Git.sh -u "hezhijie0327" -r "Toolkit" -b "main" -d "1" -m "clone"
# bash ./Toolkit/Git.sh -u "hezhijie0327" -r "Toolkit" -e "hezhijie0327@hotmail.com" -f "." -i "Generated by GitHub Actions" -m "push"

## Parameter
while getopts b:d:e:f:i:m:r:u: GetParameter; do
    case ${GetParameter} in
        b) REPO_BRANCH="${OPTARG}";;
        d) REPO_DEPTH="${OPTARG}";;
        e) USER_EMAIL="${OPTARG}";;
        f) COMMIT_FILE="${OPTARG}";;
        i) COMMIT_INFO="${OPTARG}";;
        m) GIT_MODE="${OPTARG}";;
        r) REPO_NAME="${OPTARG}";;
        u) USER_NAME="${OPTARG}";;
    esac
done

## Function
# Check Configuration Validity
function CheckConfigurationValidity() {
    if [ "${GIT_MODE}" == "" ]; then
        echo "An error occurred during processing. Missing (GIT_MODE) value, please check it and try again."
        exit 1
    elif [ "${GIT_MODE}" != "clone" ] || [ "${GIT_MODE}" != "push" ]; then
        echo "An error occurred during processing. Invalid (GIT_MODE) value, please check it and try again."
        exit 1
    fi
    if [ "${REPO_NAME}" == "" ]; then
        echo "An error occurred during processing. Missing (REPO_NAME) value, please check it and try again."
        exit 1
    fi
    if [ "${USER_NAME}" == "" ]; then
        echo "An error occurred during processing. Missing (USER_NAME) value, please check it and try again."
        exit 1
    fi
    if [ "${GIT_MODE}" == "clone" ]; then
        if [ "${REPO_BRANCH}" == "" ]; then
            echo "An error occurred during processing. Missing (REPO_BRANCH) value, please check it and try again."
            exit 1
        fi
        if [ "${REPO_DEPTH}" == "" ]; then
            echo "An error occurred during processing. Missing (REPO_DEPTH) value, please check it and try again."
            exit 1
        elif [ "$(echo ${REPO_DEPTH} | grep -E '^[0-9]{1,}$')" == "" ]; then
            echo "An error occurred during processing. Invalid (REPO_DEPTH) value, please check it and try again."
            exit 1
        fi
    elif [ "${GIT_MODE}" == "push" ]; then
        if [ "${COMMIT_FILE}" == "" ]; then
            echo "An error occurred during processing. Missing (COMMIT_FILE) value, please check it and try again."
            exit 1
        fi
        if [ "${COMMIT_INFO}" == "" ]; then
            echo "An error occurred during processing. Missing (COMMIT_INFO) value, please check it and try again."
            exit 1
        fi
        if [ "${USER_EMAIL}" == "" ]; then
            echo "An error occurred during processing. Missing (USER_EMAIL) value, please check it and try again."
            exit 1
        elif [ "$(echo ${USER_EMAIL} | grep -E '^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$')" == "" ]; then
            echo "An error occurred during processing. Invalid (USER_EMAIL) value, please check it and try again."
            exit 1
        fi
    fi
}
# Check Requirement
function CheckRequirement() {
    which "git" > "/dev/null" 2>&1
    if [ "$?" -eq "1" ]; then
        echo "git is not existed."
        exit 1
    fi
}

## Process
# Call CheckConfigurationValidity
CheckConfigurationValidity
# Call CheckRequirement
CheckRequirement
if [ "${GIT_MODE}" == "clone" ]; then
    if [ -d "${REPO_NAME}" ]; then
        echo "Oops! ${USER_NAME}/${REPO_NAME} has existed locally."
    else
        git clone -b ${REPO_BRANCH} --depth "${REPO_DEPTH}" "https://github.com/${USER_NAME}/${REPO_NAME}.git"
        if [ "$?" -eq "0" ]; then
            echo "Congratulations! ${USER_NAME}/${REPO_NAME} has cloned successfully."
        else
            echo "Oops! ${USER_NAME}/${REPO_NAME} has not cloned successfully."
        fi
    fi
elif [ "${GIT_MODE}" == "push" ]; then
    if [ "$(git status -s)" == "" ]; then
        echo "Oops! ${USER_NAME}/${REPO_NAME} has no changes."
    else
        git config user.name "${USER_NAME}"
        git config user.email "${USER_EMAIL}"
        git add "${COMMIT_FILE}"
        git commit -m "${COMMIT_INFO}"
        git push --force
        if [ "$?" -eq "0" ]; then
            echo "Congratulations! ${USER_NAME}/${REPO_NAME} has pushed successfully."
        else
            echo "Oops! ${USER_NAME}/${REPO_NAME} has not pushed successfully."
        fi
    fi
fi
